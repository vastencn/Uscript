set symbols
sub/superset
overlap, no overlap

tolerance
array pop
bool varsets

<todo>
define rangecontains

define all the new "has/isinetc.." and make 'mini single symbol boolean comparator symbols' for them
add set symbols definitions


add default version that doesn't include the "equals dots" and make it default to the "equals dots version"

add popping empty array and referencing non-existent array elements. add it to later pages where undefined/wave has be established</todo>


tolerance here means "deviation must be less than" not "deviation acceptable up to".

pops will serve well as the idea of "taking from" later

establish that a unilateral varset operation can be evaluated and check. its value is equal to resulting new value of the variable.

bool ops can be used with varset the op using the establish patterns
might need more examples, but the patter is clear i think

<todo>
**should probably add invert-array symbol(rotate-array)

**add other form of tolerance deviation up to and including)

**add examples of tolerance where numbers are drawn above or below to manipulate the upper and lower bounds independently
</todo>

5 tolerance 2 include 3.0000001 but does not include 3 or 7

all/non/etc... these benefit more form expression variables which come later

<todo>
Add defintion that declare "a larger number contains a smaller number" using has. this is the behavior if the checked input is not an array. this way it can be abstracted better into linguistic usage.
</todo> 


*show*

_2 :: maybe some more range one <br>like "how much of the range it fill"<br> or "how much the ranges overlap"

has(v1 .. v2) _20 doesnothave( | (  [3] [6] [9]  ) | .. 5  )  _20 notthisisin( 3 .. | (  [3] [3] [4] )  | ) :: has/is-in expression group<br>these might feel redundant when we have array contains operators.<br>We have three different way to discuss similar things<br>set theory .. array ops .. and has/isin<br>The has/is-in will be useful later when we abstract<br>We can ovoid overloading array and set theory ops too much
has( true true true  .. _5 false ) :: ... has o , isin (false .. true true true ) :: o is in ...
doesnothave( true true true  .. _5 false ) :: ... doesn't have o , isnotin (false .. true true true ) :: o is not in ...

hasapprox( true true true  .. _5 false ) :: ... has something approximately o , approxisin (false .. true true true ) :: something approximately o is in ...
doesnothaveapprox( true true true  .. _5 false ) :: ... doesn't have something approximately o , approxisnotin(false .. true true true ) :: something approximately o is not in ...


hasnot( true true true  .. _5 false ) :: ... has something that's not o , notthisisin(false .. true true true ) :: something not o is in ...
doesnothavenot( true true true  .. _5 false ) :: ... doesn't have something that's not o , notthisisnotin(false .. true true true ) :: something not o is not in ...



 _2 :: the has/isin search for elements in an array.<br>it means "array A has element B"<br>"array A has array B" checks if an element of A IS the array B<br>You can put comparator and formula in has/isnin braks<br>eg. A has > 5 <br>or A has [1] = 5 (any A[*][1] = 5)<br>.<br>Set theory operators compare 2 arrays to each other

supersetof :: superset of , subsetof :: subset of , setoverlap :: set overlap , nosetoverlap :: no set overlap

popa :: pop first array element, apop :: pop last array element


tol :: tolerance


rangecontains :: rangecontains range a contains range b
rangecontained :: rangecontained range a falls inside of range b

andleft :: and left. L = L and R, orleft :: or left . L = L or R 