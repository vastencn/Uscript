temp place holder page

<todo>
third isotope notation?
</todo>

*show*
 atom :: general atom symbol drawn by the word 'atom'

atom (1) :: atom(1) hydrogen , atom(2) :: atom(2) helium , atom(3) :: atom(3) lithium

_2 :: yes. the number strokes lines are very thin.<br>right now it is just scaling the number vector. <br>It will need to be redone with a thicker line width later

_2 :: IONS

atom(1.1) :: atom(1.1)  hydrogen +1 electron anion, atom(6.-1) :: atom(6.-1)  carbon -1 electron cation

_2 :: ISOTOPES

atom(6 14) :: atom(6 14) carbon 14 , atom(8 17) :: atom(8 17)oxygen 17 

atom(1 +1) :: atom(1 +1)  hydrogen +1 neutron isotope.<br>
atom(7 -2) :: atom(7 -2)  nitrogen -2 neutron isotope. 7 proton 5 <br>secondary notation method.<br>the adjuster number specifies 'neutron count = proton_count +/- x'

atom (82 208) = atom (82 +44) :: atom (82 208)  = atom (82 +44) Lead 208 (neutrons = protons + 44) 

_2 :: might add third isotope notation based on beta-stability line deviation

_2 :: ISOTOPES + IONS<br>don't use the '.' for the ion. just space it out as the third value

atom(1 1 -1) :: atom (1 1 -1) hydrogen-1 -1 electron. aka a proton
atom(8 16 2) :: atom (8 16 2) oxygen-16 +2 electrons
atom(8 +1 +1) :: atom (8 +1 1) oxygen-17 +1 electrons

_2 :: language style expression start coming together<br> some simplified sentence strictures start getting defined

atom ismadeof 2 proton implies atom(2) :: "atom is-made-of 2 proton implies helium"<br>.<br>remember .. these markup words are not literal<br>These English words are just approximations for the markup language<br>the definitions are in uscript .. not English!<br>is-made-of does not reference English terms<br>it is just a markup version of a uscript self-defined term<br>.<br>The grammar structures defined in this page are some simple simplifications<br>this sentence simplifies from<br> "(atom subpart(proton proton)) if-that-is-true(atom = helium )

item1 item2 tiem3 :: item vars. var symbol with 'particle' prefix.<br>a var that references a 'thing'<br>could easily just use 'normal vars to talk about things too<br>but always better for the var symbol to show what kind of value it's holding<br><br>This is going to ba a pattern. many types of 'vars'<br><br>it's a fun alternative style to explore<br><br>imagine that Chinese characters were the only language .. what would programming look like?<br>how would you name and handle variables if you don't name them with strings of letters?<br><br>At first we moved stuff around in numeric memory banks/registers/etc.. <br>but we quickly needed work with too many variables<br>named variables named structures and named classes and named objects  etc..<br><br>All those development frameworks were based on alphabetical language<br><br>What if there wasn't an alphabet?<br>as a programmer fluent in English and Chinese I can confidently say:<br>The current systems are optimized for alphabetical language<br>it is unlikely that it would be just a 'font swap'<br>Character languages don't fit as neatly into this paradigm<br><br>What would if happen if something like Chinese characters was the only language?<br><br>I don't know fully know where Uscript will lead me<br>But I'm going to have fun going down this non-phonetic script path<br><br>I have not designed it yet. going to follow the flow<br>But I am pretty sure its going to rely far more heavily on structures/objects/classes<br>and ability to do contextual redefinition of symbols within structures