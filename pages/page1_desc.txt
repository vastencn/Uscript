some intro vague conceptuals like arrow and subset, time/entropy, dimensions

There are mirror versions of non-commutative operations

the reverse the operation direction

Operation direction is arbitrary anyways. For example in Chinese the normal way of expressing fractions is inverted. 1/3 on third is 三分之一 (3 split of-that 1), 三分之二 is 2/3, etc..

This will also help with design expressions and 'hiding brackets' later.

<todo>Add examples of inverted non-commutative operations

add example of scinote left shift (only added right shifting so far)

*string bin digits is all high or all low should include mark to show high/low if not clear

*maybe fill in arrow triangle to add-mass to tip

*sub example maybe clarify that all can be sub or any permutation


*numbers(hex, bin-string,tens,fractions),+-/*,exp,root,log

*maybe rotate number dots so they follow reading dir l-r t-b

*maybe modify string numbers so that the digits around the radix point are inferred form position 
1_._1 = 11.11
0-.-0 = 00.00
0-\_.1= 01.11
0-.-\_= 00.01
0-\(dot in line)_1 = 00.11
etc...
</todo>


*show*
1dim 2dim 3dim 4dim :: dims , 0 1 2 :: ... numbers
b>b11/101 b>b1/10 :: fractions, sci-5 sci+11 :: sci-note
ten hun thou :: ten hun thou , = :: =
+ - * / :: + - * /, exp2 root log :: exp root log , exp :: alt exp
sub ( _14 v_20 ) :: sub()

. . . subtract . = . . :: subtract ( 3 subtract 1 = 2 ) , . subtracts . . . = . . :: subtracts ( 1 subtracts 3 = 2  )
 _1 :: the dot in the subtract symbol represents the side kept / measured

divide :: x / (divide-by) y , divides :: x \ (divides) y , _2 :: dim corner points to the 'segment length to divide into'

pow :: x to-the-power-of y , pows :: x powers-of y , _2 :: dimension corner points to power

root :: x rooted-by y , roots :: x roots y , _2 :: dims/split points at number of dimensions to fracture into

log :: x logged-by y , logs :: x logs y , _2 :: dims corner points at dimensional length to fracture into