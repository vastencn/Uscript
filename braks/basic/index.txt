index of brakets
csv format of spelling / subfolder


!!!---1 ARG BRAKS---!!!
sub,sub
subof,subof
brak,brak
subcup,subcup
subofcup,subofcup
eval,eval
evalneg,evalneg
atom,atom
arel,arel
exp,exp
agen,agen

!!!---Chain braks are a subtype of 1 arg braks---!!!
chain,chain


!!!--- 2 ARG BRAKS---!!!

IF and IFNOT depend on eval evalneg and sub/subcup
if,if
twostack,twostack




Brak aliases
these allow alternate spelling
they are braket type specific
they also allow you to overflow a spelling
and to differentiate between the types of brakets () [] {} thats what the firstnumber is
these also allow pasing of arguments to existing braks
this way more complex braks can be built out of more basic braks
the decision of wherther to build a new brak fresh or by adding features to an existing brak is up to the dev

1,ariel,arel
2,brak,arel
2,sub,subcup
2,subof,subofcup

1,subcat,subcup_opt_ tax=1 : def=subtax
1,subpart,subcup_opt_ part=1 : def=subpart
1,subif,subcup_opt_ yes=1 : branchlen=13 : def=subif

1,sin,brak_opt_ img=sin : rshift=6 : irshift=6 : minh=30 : def=sin
1,cos,brak_opt_ img=cos : rshift=6 : irshift=6 : minh=30 : def=cos
1,tan,brak_opt_ img=tan : rshift=6 : irshift=6 : minh=30 : def=tan

1,xint,agen_opt_ : rshift=1 : irshift=1 : minh=30 : def=xint : xint=1
1,yint,agen_opt_ : rshift=1 : irshift=1 : minh=30 : def=yint : yint=1

1,pos,brak_opt_ img=pos : rshift=17 : irshift=6 : minh=30 : def=pos
1,impos,brak_opt_ img=impos : rshift=17 : irshift=6 : minh=30 : def=impos

1,count,brak_opt_ img=count : rshift=14.5 : irshift=0 : minh=30 : def=count
1,sum,brak_opt_ img=sum : rshift=12 : irshift=0 : minh=30 : def=sum

1,prod,brak_opt_ img=prod : rshift=10 : irshift=6 : minh=30 : def=prod
1,expo,brak_opt_ img=exp : rshift=10 : irshift=8 : minh=30 : def=expo

1,avg,brak_opt_ img=avg : rshift=18.6 : irshift=0 : minh=30 : def=avg
1,sd,brak_opt_ img=sd : rshift=17.8 : irshift=0 : minh=30 : def=sd
1,max,brak_opt_ img=max : rshift=14.5 : irshift=0 : minh=30 : def=max
1,min,brak_opt_ img=min : rshift=14.5 : irshift=0 : minh=30 : def=min



1,exe,brak_opt_ img=exe : rshift=3.3 : irshift=2.5 : minh=30 : def=exe
1,eval,brak_opt_ dot=1 : rshift=2.5 : irshift=2.5 : minh=30 : def=eval
1,evalnot,brak_opt_ circ=1 : rshift=2.5 : irshift=2.5 : minh=30 : def=evalnot

//right shift   internal right shift.. for the image embeded in the bracket wall

1,all,brak_opt_ img=all : rshift=9 : irshift=6 : minh=30 : def=all
1,none,brak_opt_ img=none : rshift=6 : irshift=9 : minh=30 : def=none
1,any,brak_opt_ img=any : rshift=9 : irshift=9 : minh=30 : def=any

// ADD DEFS!!!!!


1,subarel,arel_opt_ sublen=5 : def=arel
2,s,arel_opt_ sublen=5
2,sid,arel_opt_ sublen=0
2,all,arel_opt_ sublen=11 : all=1 : img=all : rshift=12 : irshift=6 : def=arall
2,any,arel_opt_ sublen=11 : all=1 : img=any : rshift=12 : irshift=8 : def=arany
2,none,arel_opt_ sublen=8 : all=1 : img=none : rshift=9 : irshift=8 : def=arnone
2,subar,arel_opt_ sublen=15 : subar=1 : rshift=9 : irshift=8 : def=subar



1,iff,if_opt_ not=1 : sublen=5 : def=if
1,ify,if_opt_ yes=1 : sublen=5 : def=if
1,ifn,if_opt_ no=1 : sublen=5 : def=if
1,iffy,if_opt_ yes=1 : not=1 : sublen=5 : def=if
1,iffn,if_opt_ no=1 : not=1 : sublen=5 : def=if

// prefixing the variable name with c or s targets the condition brak or the sub brak
//condition r shift  condition internal right shift
1,while,if_opt_ while=1 : crshift=7 : cirshift=11 : def=while
1,whilef,if_opt_ while=1 : crshift=7 : cirshift=11 : no=1 : def=while
1,foreach,if_opt_ foreach=1 : crshift=9.3 : cirshift=10 : yes=1 : def=foreach
1,popall,if_opt_ popa=1 : crshift=7 : cirshift=11 : def=popall
1,allpop,if_opt_ apop=1 : crshift=7 : cirshift=11 : def=allpop
1,asteps,if_opt_ apair=1 : crshift=7 : cirshift=11 : def=asteps
1,stepsa,if_opt_ paira=1 : crshift=7 : cirshift=11 : def=stepsa

//function braket
1,func,if_opt_ func=1 : crshift=7 : cirshift=11 : def=func

//has, doesnt have, is in, is not in
1,has,if_opt_ has=1 : def=has
1,isin,if_opt_ isin=1 : def=has
1,nhas,if_opt_ nhas=1 : def=has
1,nisin,if_opt_ nisin=1 : def=has

//interaction
1,interact,twostack_opt_ interact=1 : def=interact
1,rinteract,twostack_opt_ rinteract=1 : interact=1 : def=rinteract
1,give,twostack_opt_ give=1 : def=give
1,get,twostack_opt_ get=1 : def=get

//conversion
1,convert,chain_opt_ convert=1 : def=convert
